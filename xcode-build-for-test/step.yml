title: "[BETA] Xcode Build for testing for iOS"
summary: Performs xcodebuild's build-for-testing action
description: |- 
  The Step runs Xcode's `xcodebuild` command with the `build-for-testing` option. This builds your app for testing and also creates an `.xctestrun` file. 
  
  ### Configuring the Step 
  
  At a minimum, the Step needs valid values for three inputs:
  
  - **Project (or Workspace) path**: This is the path to the `.xcodeproj` or `.xcworkspace` file. In most cases, leave it on the default value.
  - **Scheme name**: The name of your Xcode scheme. By default, the Step will use the scheme that was set when you added the app on Bitrise.
  - **Device destination**: The device and platform type to build the tests for. For available values call, `man xcodebuild` and check the Destinations section. 
  We also recommend checking out our [System reports page](https://github.com/bitrise-io/bitrise.io/tree/master/system_reports) on GitHub: you can check out the available, pre-installed simulators and other tools. 
  
  Optionally, you can define the configuration to use in the **Configuration name** input. Normally, the scheme defines the configuration type, such as **debug** or **release**.
  
  The Step can also cache your Swift PM dependencies. To enable caching, make sure the **Enable caching of Swift Package Manager packages** input is set to `swift_packages`.
  
  ### Troubleshooting
  
  In the **Debug** option group, you can:
  
  - Add additional flags to the `xcodebuild` command. 
  - Enable verbose logging.
  - Change the output directory path and the output tool.
  
  ### Useful links
  
  - [Running Xcode tests](https://devcenter.bitrise.io/testing/running-xcode-tests/)
  - [Building from the Command Line with Xcode](https://developer.apple.com/library/archive/technotes/tn2339/_index.html)
  
  ### Related Steps 
  
  - [Xcode Test for iOS](https://www.bitrise.io/integrations/steps/xcode-test)
  - [Xcode Analyze](https://www.bitrise.io/integrations/steps/xcode-analyze)
 

website: https://github.com/bitrise-steplib/steps-xcode-build-for-test
source_code_url: https://github.com/bitrise-steplib/steps-xcode-build-for-test
support_url: https://github.com/bitrise-steplib/steps-xcode-build-for-test/issues

project_type_tags:
  - ios
  - react-native
  - cordova
  - ionic

type_tags:
  - build

deps:
  check_only:
  - name: xcode

toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-build-for-test

inputs:
  #
  # xcodebuild configuration
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: Project path
      summary: Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.
      description: |-
        Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.

        The Input value will set xcodebuild’s `-project` or `-workspace` option.
      is_required: true

  - scheme: $BITRISE_SCHEME
    opts:
      title: Scheme
      summary: Xcode Scheme name.
      description: |-
        Xcode Scheme name.

        The Input value will set xcodebuild’s `-scheme` option.
      is_required: true

  - configuration:
    opts:
      category: xcodebuild configuration
      title: Build Configuration
      summary: Xcode Build Configuration.
      description: |-
        Xcode Build Configuration.

        If not specified, xcodebuild will use the default Build Configuration.

        The Input value will set xcodebuild’s `-configuration` option.

  - destination: generic/platform=iOS
    opts:
      title: Device destination specifier
      summary: Destination specifier describes the device to use as a destination.
      description: |-
        Destination specifier describes the device to use as a destination.

        The Input value will set xcodebuild’s `-destination` option.
      is_required: true

  - xcconfig_content: COMPILER_INDEX_STORE_ENABLE = NO
    opts:
      category: xcodebuild configuration
      title: Build settings overrides
      summary: Apply the build settings as overrides.
      description: |-
        Apply the build settings as overrides.

        The Input value will set xcodebuild’s `-xcconfig` option.

  - output_tool: xcpretty
    opts:
      category: xcodebuild configuration
      title: xcodebuild log persentation
      summary: Defines how xcodebuild command’s log is presented.
      description: |-
        Defines how xcodebuild command’s log is presented.

        Available options:
        - `xcpretty`: The xcodebuild command’s output will be prettified by xcpretty.
        - `xcodebuild`: Only the last 20 lines of raw xcodebuild output will be visible in the build log.

        The raw xcodebuild log will be exported in both cases.
      value_options:
        - xcpretty
        - xcodebuild
      is_required: true

  - xcodebuild_options:
    opts:
      category: xcodebuild configuration
      title: Additional options for the xcodebuild command
      summary: Additional options to be added to the executed xcodebuild command.
      description: |-
        Additional options to be added to the executed xcodebuild command.

  #
  # Automatic Code Signing
  - automatic_code_signing: "off"
    opts:
      category: Automatic code signing
      title: Automatic code signing method
      summary: This input determines which Bitrise Apple service connection should be used for automatic code signing.
      description: |-
        This input determines which Bitrise Apple service connection should be used for automatic code signing.

        Available values:
        - `off`: Do not do any auto codesigning
        - `enterprise-with-apple-id`: [Bitrise Apple Service connection with an Apple Developer Enterpsie account.](https://devcenter.bitrise.io/getting-started/connecting-to-services/connecting-to-an-apple-service-with-apple-id/)
        - `api-key`: [Bitrise Apple Service connection with API Key.](https://devcenter.bitrise.io/getting-started/connecting-to-services/setting-up-connection-to-an-apple-service-with-api-key/)
        - `apple-id`: [Bitrise Apple Service connection with Apple ID.](https://devcenter.bitrise.io/getting-started/connecting-to-services/setting-up-connection-to-an-apple-service-with-api-key/)
      value_options:
        - "off"
        - "enterprise-with-apple-id"
        - "api-key"
        - "apple-id"
      is_required: true

  - register_test_devices: "no"
    opts:
      category: Automatic code signing
      title: Register test devices on the Apple Developer Portal
      summary: If set the step will register known test devices on Bitrise from team members with the Apple Developer Portal.
      description: |-
        If set the step will register known test devices on Bitrise from team members with the Apple Developer Portal.

        Note that setting this to "yes" may cause devices to be registered against your limited quantity of test devices in the Apple Developer Portal, which can only be removed once annually during your renewal window.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - min_profile_validity: 0
    opts:
      category: Automatic code signing
      title: The minimum days the Provisioning Profile should be valid
      summary: If set to >0 the managed Provisioning Profile will be renewed if it expires within the configured number of days.
      description: |-
        If set to >0 the managed Provisioning Profile will be renewed if it expires within the configured number of days.

        Otherwise the Step renews the managed Provisioning Profile if it is expired.

  - certificate_urls: $BITRISE_CERTIFICATE_URL
    opts:
      category: Automatic code signing
      title: Code signing certificate URL
      summary: URL of the code signing certificate to download.
      description: |-
        URL of the code signing certificate to download.

        Multiple URLs can be specified, separated by a pipe (`|`) character.

        Local file path can be specified, using the `file://` URL scheme.

  - passphrases: $BITRISE_CERTIFICATE_PASSPHRASE
    opts:
      category: Automatic code signing
      title: Code signing certificate passphrase
      summary: Passphrases for the provided code signing certificates.
      description: |-
        Passphrases for the provided code signing certificates.

        Specify as many passphrases as many Code signing certificate URL provided, separated by a pipe (`|`) character.

  - keychain_path: $BITRISE_KEYCHAIN_PATH
    opts:
      category: Automatic code signing
      title: Keychain path
      summary: Path to the Keychain where the code signing certificates will be installed.
      description: |-
        Path to the Keychain where the code signing certificates will be installed.

  - keychain_password: $BITRISE_KEYCHAIN_PASSWORD
    opts:
      category: Automatic code signing
      title: Keychain password
      summary: Password for the provided Keychain.
      description: |-
        Password for the provided Keychain.

  - build_url: $BITRISE_BUILD_URL
    opts:
      category: Automatic code signing
      title: Bitrise build URL
      summary: URL of the current Bitrise build.
      description: |-
        URL of the current Bitrise build.

  - build_api_token: $BITRISE_BUILD_API_TOKEN
    opts:
      category: Automatic code signing
      title: Bitrise build API token
      summary: API token to access Bitrise resources during the current build.
      description: |-
        API token to access Bitrise resources during the current build.

  #
  # Step output configuration
  - output_dir: $BITRISE_DEPLOY_DIR
    opts:
      category: Step Output Export configuration
      title: Output directory path
      summary: This directory will contain the generated  artifacts.
      description: |-
        This directory will contain the generated  artifacts.
      is_required: true

  #
  # Caching
  - cache_level: swift_packages
    opts:
      category: Caching
      title: Enable collecting cache content
      summary: Defines what cache content should be automatically collected.
      description: |-
        Defines what cache content should be automatically collected.

        Available options:
        - `none`: Disable collecting cache content.
        - `swift_packages`: Collect Swift PM packages added to the Xcode project.
      value_options:
        - "none"
        - "swift_packages"
      is_required: true

  #
  # Debugging
  - verbose_log: "no"
    opts:
      category: Debugging
      title: Enable verbose logging
      summary: If set the Step will print additional logs for debugging.
      description: |-
        If set the Step will print additional logs for debugging.
      value_options:
        - "yes"
        - "no"
      is_required: true

outputs:
  - BITRISE_TEST_DIR_PATH:
    opts:
      title: "Path to the built test directory (example: PROJECT_DERIVED_DATA/Build/Products/Debug-iphoneos)"
  - BITRISE_XCTESTRUN_FILE_PATH:
    opts:
      title: "Path to the built xctestrun file (example: PROJECT_DERIVED_DATA/Build/Products/ios-simple-objc_iphoneos12.0-arm64e.xctestrun)"
  - BITRISE_TEST_BUNDLE_ZIP_PATH:
    opts:
      title: "The built test directory and the built xctestrun file compressed as a single zip"
  - BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH:
    opts:
      title: The full, raw build output file path
      description: |-
        This is the path of the raw build results log file.
        If `output_tool=xcpretty` and the build fails this log will contain the build output.