title: Xcode Archive & Export for iOS
summary: Run the Xcode archive command and then export an .ipa from the archive.
description: |-

  The Step archives your Xcode project by running the `xcodebuild archive` command and then exports the archive into an .ipa file with the `xcodebuild -exportArchive` command. This .ipa file can be shared, installed on test devices, or uploaded to the App Store Connect.

  ### Configuring the Step

  Before you can use the Step, you need code signing files. Certificates must be uploaded to Bitrise while provisioning profiles should be either uploaded or, if using the iOS Auto Provisioning Step, downloaded from the Apple Developer Portal or generated automatically.

  To configure the Step:

  1. Make sure the **Project (or Workspace) path** input points to the correct location.

     By default, you do not have to change this.
  1. Set the correct value to the **Select method for export** input. If you use the **iOS Auto Provision** Step, the value of this input should be the same as the **Distribution type** input of that Step.
  1. Make sure the target scheme is a valid, existing Xcode scheme.
  1. Optionally, you can define a configuration type to be used (such as Debug or Release) in the **Configuration name** input.

     By default, the selected Xcode scheme determines which configuration will be used. This option overwrites the configuration set in the scheme.
  1. If you wish to use a different Developer portal team than the one set in your Xcode project, enter the ID in the **he Developer Portal team to use for this export** input.

  ### Troubleshooting

  If the Step fails, check your code signing files first. Make sure they are the right type for your export method. For example, an `app-store` export method requires an App Store type provisioning profile and a Distribution certificate.

  Check **Debug** for additional options to run the Step. The **Additional options for xcodebuild call** input allows you add any flags that the `xcodebuild` command supports.

  Make sure the **Scheme name** and **Configuration name** inputs contain values that actually exist in your Xcode project.

  ### Useful links

  - https://devcenter.bitrise.io/code-signing/ios-code-signing/create-signed-ipa-for-xcode/
  - https://devcenter.bitrise.io/code-signing/ios-code-signing/resigning-an-ipa/
  - https://devcenter.bitrise.io/deploy/ios-deploy/ios-deploy-index/

  ### Related Steps

  - [Certificate and profile installer](https://www.bitrise.io/integrations/steps/certificate-and-profile-installer)
  - [iOS Auto Provision](https://www.bitrise.io/integrations/steps/ios-auto-provision)
  - [Deploy to iTunesConnect](https://www.bitrise.io/integrations/steps/deploy-to-itunesconnect-deliver)

website: https://github.com/bitrise-steplib/steps-xcode-archive
source_code_url: https://github.com/bitrise-steplib/steps-xcode-archive
support_url: https://github.com/bitrise-steplib/steps-xcode-archive/issues
project_type_tags:
  - ios
  - react-native
  - flutter
type_tags:
  - build
is_requires_admin_user: false
is_always_run: false
is_skippable: false
deps:
  check_only:
    - name: xcode
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-archive
inputs:
  #
  # xcodebuild configuration
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: Project path
      summary: Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.
      description: |-
        Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.

        The Input value will set xcodebuild’s `-project` or `-workspace` option.
      is_required: true

  - scheme: $BITRISE_SCHEME
    opts:
      title: Scheme
      summary: Xcode Scheme name.
      description: |-
        Xcode Scheme name.

        The Input value will set xcodebuild’s `-scheme` option.
      is_required: true

  - configuration:
    opts:
      category: xcodebuild configuration
      title: Build Configuration
      summary: Xcode Build Configuration.
      description: |-
        Xcode Build Configuration.

        If not specified, `xcodebuild` will use the default Build Configuration.

        The Input value will set xcodebuild’s `-configuration` option.

  - xcconfig_content: COMPILER_INDEX_STORE_ENABLE = NO
    opts:
      category: xcodebuild configuration
      title: Build settings overrides
      summary: Apply the build settings as overrides.
      description: |-
        Apply the build settings as overrides.

        The Input value will set xcodebuild’s `-xcconfig` option.

  - perform_clean_action: "no"
    opts:
      category: xcodebuild configuration
      title: Perform clean action
      summary: If set `clean` xcodebuild action will be performed in addition to the `archive` action.
      description: |-
        If set `clean` xcodebuild action will be performed in addition to the `archive` action.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - output_tool: xcpretty
    opts:
      category: xcodebuild configuration
      title: xcodebuild log persentation
      summary: Defines how xcodebuild command’s log is presented.
      description: |-
        Defines how xcodebuild command’s log is presented.

        Available options:
        - `xcpretty`: The xcodebuild command’s output will be prettified by xcpretty.
        - `xcodebuild`: Only the last 20 lines of raw xcodebuild output will be visible in the build log.

        The raw xcodebuild log will be exported in both cases.
      value_options:
        - xcpretty
        - xcodebuild
      is_required: true

  - xcodebuild_options:
    opts:
      category: xcodebuild configuration
      title: Additional options for the xcodebuild command
      summary: Additional options to be added to the executed xcodebuild command.
      description: |-
        Additional options to be added to the executed xcodebuild command.

  #
  # Automatic Code Signing
  - automatic_code_signing: "off"
    opts:
      category: Automatic code signing
      title: Automatic code signing method
      summary: This input determines which Bitrise Apple service connection should be used for automatic code signing.
      description: |-
        This input determines which Bitrise Apple service connection should be used for automatic code signing.

        Available values:
        - `off`: Do not do any auto codesigning
        - `enterprise-with-apple-id`: [Bitrise Apple Service connection with an Apple Developer Enterpsie account.](https://devcenter.bitrise.io/getting-started/connecting-to-services/connecting-to-an-apple-service-with-apple-id/)
        - `api-key`: [Bitrise Apple Service connection with API Key.](https://devcenter.bitrise.io/getting-started/connecting-to-services/setting-up-connection-to-an-apple-service-with-api-key/)
        - `apple-id`: [Bitrise Apple Service connection with Apple ID.](https://devcenter.bitrise.io/getting-started/connecting-to-services/setting-up-connection-to-an-apple-service-with-api-key/)
      value_options:
        - "off"
        - "enterprise-with-apple-id"
        - "api-key"
        - "apple-id"
      is_required: true

  - register_test_devices: "no"
    opts:
      category: Automatic code signing
      title: Register test devices on the Apple Developer Portal
      summary: If set the step will register known test devices on Bitrise from team members with the Apple Developer Portal.
      description: |-
        If set the step will register known test devices on Bitrise from team members with the Apple Developer Portal.

        Note that setting this to "yes" may cause devices to be registered against your limited quantity of test devices in the Apple Developer Portal, which can only be removed once annually during your renewal window.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - min_profile_validity: 0
    opts:
      category: Automatic code signing
      title: The minimum days the Provisioning Profile should be valid
      summary: If set to >0 the managed Provisioning Profile will be renewed if it expires within the configured number of days.
      description: |-
        If set to >0 the managed Provisioning Profile will be renewed if it expires within the configured number of days.

        Otherwise the Step renews the managed Provisioning Profile if it is expired.

  - certificate_urls: $BITRISE_CERTIFICATE_URL
    opts:
      category: Automatic code signing
      title: Code signing certificate URL
      summary: URL of the code signing certificate to download.
      description: |-
        URL of the code signing certificate to download.

        Multiple URLs can be specified, separated by a pipe (`|`) character.

        Local file path can be specified, using the `file://` URL scheme.

  - passphrases: $BITRISE_CERTIFICATE_PASSPHRASE
    opts:
      category: Automatic code signing
      title: Code signing certificate passphrase
      summary: Passphrases for the provided code signing certificates.
      description: |-
        Passphrases for the provided code signing certificates.

        Specify as many passphrases as many Code signing certificate URL provided, separated by a pipe (`|`) character.

  - keychain_path: $BITRISE_KEYCHAIN_PATH
    opts:
      category: Automatic code signing
      title: Keychain path
      summary: Path to the Keychain where the code signing certificates will be installed.
      description: |-
        Path to the Keychain where the code signing certificates will be installed.

  - keychain_password: $BITRISE_KEYCHAIN_PASSWORD
    opts:
      category: Automatic code signing
      title: Keychain password
      summary: Password for the provided Keychain.
      description: |-
        Password for the provided Keychain.

  - build_url: $BITRISE_BUILD_URL
    opts:
      category: Automatic code signing
      title: Bitrise build URL
      summary: URL of the current Bitrise build.
      description: |-
        URL of the current Bitrise build.

  - build_api_token: $BITRISE_BUILD_API_TOKEN
    opts:
      category: Automatic code signing
      title: Bitrise build API token
      summary: API token to access Bitrise resources during the current build.
      description: |-
        API token to access Bitrise resources during the current build.

  #
  # IPA export Inputs
  - distribution_method: "development"
    opts:
      title: Distribution method
      summary: Describes how Xcode should export the archive.
      description: |-
        Describes how Xcode should export the archive.
      value_options:
        - "development"
        - "app-store"
        - "ad-hoc"
        - "enterprise"
      is_required: true

  - export_development_team:
    opts:
      category: IPA export configuration
      title: Developer Portal team
      summary: The Developer Portal team to use for this export.
      description: |-
        The Developer Portal team to use for this export.

        Defaults to the team used to build the archive.

  - compile_bitcode: "yes"
    opts:
      category: IPA export configuration
      title: Rebuild from bitcode
      summary: For __non-App Store__ exports, should Xcode re-compile the app from bitcode?
      description: |
        For __non-App Store__ exports, should Xcode re-compile the app from bitcode?
      value_options:
        - "yes"
        - "no"
      is_required: true

  - upload_bitcode: "yes"
    opts:
      category: IPA export configuration
      title: Include bitcode
      summary: For __App Store__ exports, should the package include bitcode?
      description: |-
        For __App Store__ exports, should the package include bitcode?
      value_options:
        - "yes"
        - "no"
      is_required: true

  - icloud_container_environment:
    opts:
      category: IPA export configuration
      title: iCloud container environment
      summary: If the app is using CloudKit, this configures the "com.apple.developer.icloud-container-environment" entitlement.
      description: |-
        If the app is using CloudKit, this configures the "com.apple.developer.icloud-container-environment" entitlement.

        Available options vary depending on the type of provisioning profile used, but may include: Development and Production.

  - export_options_plist_content:
    opts:
      category: IPA export configuration
      title: Export options plist content
      summary: Specifies a plist file content that configures archive exporting.
      description: |-
        Specifies a plist file content that configures archive exporting.

        If not set the Step will auto-generate it.

  #
  # Step output configuration
  - output_dir: $BITRISE_DEPLOY_DIR
    opts:
      category: Step Output Export configuration
      title: Output directory path
      summary: This directory will contain the generated  artifacts.
      description: |-
        This directory will contain the generated  artifacts.
      is_required: true

  - export_all_dsyms: "yes"
    opts:
      category: Step Output Export configuration
      title: Export all dSYMs
      summary: Export additional dSYM files for Frameworks, not just the app dSYM file.
      description: |-
        Export additional dSYM files for Frameworks, not just the app dSYM file.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - artifact_name: ${scheme}
    opts:
      category: Step Output Export configuration
      title: Generated artifact name
      summary: This name will be used as basename for the generated Xcode Archive, App, IPA and dSYM files.
      description: |-
        This name will be used as basename for the generated Xcode Archive, App, IPA and dSYM files.

  #
  # Caching
  - cache_level: swift_packages
    opts:
      category: Caching
      title: Enable collecting cache content
      summary: Defines what cache content should be automatically collected.
      description: |-
        Defines what cache content should be automatically collected.

        Available options:
        - `none`: Disable collecting cache content.
        - `swift_packages`: Collect Swift PM packages added to the Xcode project.
      value_options:
        - "none"
        - "swift_packages"
      is_required: true

  #
  # Debugging
  - verbose_log: "no"
    opts:
      category: Debugging
      title: Enable verbose logging
      summary: If set the Step will print additional logs for debugging.
      description: |-
        If set the Step will print additional logs for debugging.
      value_options:
        - "yes"
        - "no"
      is_required: true

outputs:
  - BITRISE_IPA_PATH:
    opts:
      title: The created .ipa file's path
  - BITRISE_APP_DIR_PATH:
    opts:
      title: The generated .app directory
  - BITRISE_DSYM_DIR_PATH:
    opts:
      title: The created .dSYM dir's path
      description: |-
        This Environment Variable points to the path of the directory which contains the dSYMs files.
        If `export_all_dsyms` is set to `yes`, the Step will collect every dSYM (app dSYMs and framwork dSYMs).
  - BITRISE_DSYM_PATH:
    opts:
      title: The created .dSYM.zip file's path
      description: |-
        This Environment Variable points to the path of the zip file which contains the dSYM files.
        If `export_all_dsyms` is set to `yes`, the Step will also collect framework dSYMs in addition to app dSYMs.
  - BITRISE_XCARCHIVE_PATH:
    opts:
      title: The created .xcarchive file's path
  - BITRISE_XCARCHIVE_ZIP_PATH:
    opts:
      title: The created .xcarchive.zip file's path
      description: |-
        The created .xcarchive.zip file's path.

  - BITRISE_XCODEBUILD_ARCHIVE_LOG_PATH:
    opts:
      title: "`xcodebuild archive` command log file path"
      description: |-
        The file path of the raw `xcodebuild archive` command log. The log is placed into the `Output directory path`.
  - BITRISE_XCODEBUILD_EXPORT_ARCHIVE_LOG_PATH:
    opts:
      title: "`xcodebuild -exportArchive` command log file path"
      description: |-
        The file path of the raw `xcodebuild -exportArchive` command log. The log is placed into the `Output directory path`.
  - BITRISE_IDEDISTRIBUTION_LOGS_PATH:
    opts:
      title: Path to the xcdistributionlogs
      description: |-
        Exported when `xcodebuild -exportArchive` command fails.
