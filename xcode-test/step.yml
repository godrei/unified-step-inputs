title: Xcode Test for iOS
summary: |-
  Runs your project's pre-defined Xcode tests on every build.
description: |-
  This Steps runs all those Xcode tests that are included in your project. 
  The Step will work out of the box if your project has test targets and your Workflow has the **Deploy to Bitrise.io** Step which exports the test results and (code coverage files if needed) to the Test Reports page. 
  This Step does not need any code signing files since the Step deploys only the test results to [bitrise.io](https://www.bitrise.io).

  ### Configuring the Step
  If you click into the Step, there are some required input fields whose input must be set in accordance with the Xcode configuration of the project.  
  The **Scheme name** input field must be marked as Shared in Xcode. 
  The **Device**, **OS version**, **Platform** input fields must be set to the value that's shown in Xcode’s device selection dropdown menu.
  If you wish to export code coverage files as well, set the "Generate code coverage files?" to `yes`.

  ### Troubleshooting
  If the **Deploy to Bitrise.io** Step is missing from your Workflow, then the **Xcode Test for iOS** Step will not be able to export the test results on the Test Reports page and you won't be able to view them either.
  The xcpretty output tool does not support parallel tests. 
  If parallel tests are enabled in your project, go to the Step’s Debug section and set the **Output tool** input’s value to xcodebuild.
  If the Xcode test fails with the error `Unable to find a destination matching the provided destination specifier`, then check our [system reports](https://github.com/bitrise-io/bitrise.io/tree/master/system_reports) to see if the requested simulator is on the stack or not. 
  If it is not, then pick a simulator that is on the stack.

  ### Useful links
  - [About Test Reports](https://devcenter.bitrise.io/testing/test-reports/)
  - [Running Xcode Tests for iOS](https://devcenter.bitrise.io/testing/running-xcode-tests/)

  ### Related Steps
  - [Deploy to Bitrise.io](https://www.bitrise.io/integrations/steps/deploy-to-bitrise-io)
  - [iOS Device Testing](https://www.bitrise.io/integrations/steps/virtual-device-testing-for-ios)
website: https://github.com/bitrise-steplib/steps-xcode-test
source_code_url: https://github.com/bitrise-steplib/steps-xcode-test
support_url: https://github.com/bitrise-steplib/steps-xcode-test/issues
host_os_tags:
  - "osx-10.10"
project_type_tags:
  - ios
  - cordova
  - ionic
  - react-native
  - flutter
type_tags:
  - test
is_requires_admin_user: false
is_always_run: false
is_skippable: false
deps:
  check_only:
  - name: xcode
  brew:
  - name: go
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-test
inputs:
  #
  # xcodebuild configuration
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: Project path
      summary: Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.
      description: |-
        Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.

        The Input value will set xcodebuild’s `-project` or `-workspace` option.
      is_required: true

  - scheme: $BITRISE_SCHEME
    opts:
      title: Scheme
      summary: Xcode Scheme name.
      description: |-
        Xcode Scheme name.

        The Input value will set xcodebuild’s `-scheme` option.
      is_required: true

  - test_plan:
    opts:
      title: Test Plan
      summary: Run tests in a specific Test Plan associated with the Scheme.
      description: |-
        Run tests in a specific Test Plan associated with the Scheme.

        Leave this input empty to run the default Test Plan or Test Targets associated with the Scheme.

  - simulator_platform: iOS Simulator
    opts:
      title: Simulator Platform
      summary: The simulator platform to use.
      description: |-
        The simulator platform to use.

        Set it as it is shown in Xcode's device selection dropdown UI.

        Available options:
        - iOS Simulator
        - tvOS Simulator

        The Input value will configure xcodebuild’s `-destination` option.
      value_options:
      - iOS Simulator
      - tvOS Simulator
      is_required: true

  - simulator_device: iPhone 8 Plus
    opts:
      title: Simulator Name
      summary: The name of the simulated device to use.
      description: |-
        The name of the simulated device to use.

        Set it as it is shown in Xcode's device selection dropdown UI.

        Examples:
        - iPhone 8 Plus
        - iPhone Xs Max
        - iPad Air (3rd generation)
        - iPad Pro (12.9-inch) (3rd generation)
        - Apple TV 4K (don't forget to set `simulator_platform` to `tvOS Simulator` to use this option)

        The Input value will configure xcodebuild’s -destination option.
      is_required: true

  - simulator_os_version: latest
    opts:
      title: Simulator OS version
      summary: The OS version for the simulated device.
      description: |-
        The OS version for the simulated device.

        Examples:
        - latest
        - 14.5

        The Input value will configure xcodebuild’s -destination option.
      is_required: true

  - test_repetition_mode: "none"
    opts:
      title: Test Repetition Mode (Available in Xcode 13+)
      category: Test Repetition
      summary: Determines how the tests will repeat.
      description: |-
        Determines how the tests will repeat.

        Available options:        
        - `none`: Tests will never repeat.
        - `until_failure`: Tests will repeat until failure or up to maximum repetitions.
        - `retry_on_failure`: Only failed tests will repeat up to maximum repetitions.
        - `up_until_maximum_repetitions` : Tests will repeat up until maximum repetitions.

        The Input value together with Maximum Test Repetitions (`maximum_test_repetitions`) Input will set xcodebuild’s `-run-tests-until-failure` / `-retry-tests-on-failure` or `-test-iterations` option.
      value_options:
        - "none"
        - "until_failure"
        - "retry_on_failure"
        - "up_until_maximum_repetitions"

  - maximum_test_repetitions: 3
    opts:
      title: Maximum Test Repetitions (Available in Xcode 13+)
      category: Test Repetition
      summary: The maximum number of times a test will repeat based on Test Repetition Mode (`test_repetition_mode`).
      description: |-
        The maximum number of times a test will repeat based on Test Repetition Mode (test_repetition_mode).

        Should be more than 1 if the Test Repetition Mode is other than `none`.

        The Input value will set xcodebuild’s `-test-iterations` option.
      is_required: true

  - relaunch_tests_for_each_repetition: "no"
    opts:
      title: Relaunch Tests for Each Repetition (Available in Xcode 13+)
      category: Test Repetition
      summary: If enabled, tests will launch in a new process for each repetition.
      description: |-
        If enabled, tests will launch in a new process for each repetition.

        By default, tests launch in the same process for each repetition.

        The Input value will set xcodebuild’s `-test-repetition-relaunch-enabled` option.
      value_options:
      - "yes"
      - "no"

  - xcconfig_content: COMPILER_INDEX_STORE_ENABLE = NO
    opts:
      category: xcodebuild configuration
      title: Build settings overrides
      summary: Apply the build settings as overrides.
      description: |-
        Apply the build settings as overrides.

        The Input value will set xcodebuild’s `-xcconfig` option.

  - single_xcodebuild_command: "yes"
    opts:
      category: xcodebuild configuration
      title: Execute a single xcodebuild command
      summary: If set the step will run a single `xcodebuild test` command.
      description: |-
        If set the step will run a single `xcodebuild test` command, otherwise `xcodebuild build` will be executed first.
      value_options:
      - "yes"
      - "no"

  - perform_build_action: "yes"
    opts:
      category: xcodebuild configuration
      title: Perform build action
      summary: If set `build` xcodebuild action will be performed in addition to the `test` action.
      description: |-
        If set `build` xcodebuild action will be performed in addition to the `test` action.

        Set this input to avoid the bug that `xcodebuild test` times out waiting for simulator to boot if build takes >120 seconds.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - perform_clean_action: "no"
    opts:
      category: xcodebuild configuration
      title: Perform clean action
      summary: If set `clean` xcodebuild action will be performed in addition to the `test` action.
      description: |-
        If set `clean` xcodebuild action will be performed in addition to the `test` action.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - should_retry_tests_on_fail: "no"
    opts:
      category: Test Repetition
      title: Should retry tests on failure? (Not available in Xcode 13+)
      summary: If set the Step will rerun the tests in the case of failed tests.
      description: |-
        If set the Step will rerun the tests in the case of failed tests.

        Note that all the tests will be rerun, not just the ones that failed.    
      value_options:
        - "yes"
        - "no"
      is_required: true

  - output_tool: xcpretty
    opts:
      category: xcodebuild configuration
      title: xcodebuild log persentation
      summary: Defines how xcodebuild command’s log is presented.
      description: |-
        Defines how xcodebuild command’s log is presented.

        Available options:
        - `xcpretty`: The xcodebuild command’s output will be prettified by xcpretty.
        - `xcodebuild`: Only the last 20 lines of raw xcodebuild output will be visible in the build log.

        The raw xcodebuild log will be exported in both cases.
      value_options:
        - xcpretty
        - xcodebuild
      is_required: true

  - xcodebuild_options:
    opts:
      category: xcodebuild configuration
      title: Additional options for the xcodebuild command
      summary: Additional options to be added to the executed xcodebuild command.
      description: |-
        Additional options to be added to the executed xcodebuild command.

  - xcpretty_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/xcode-test-results-${BITRISE_SCHEME}.html"
    opts:
      category: xcodebuild configuration
      title: Additional options for the `xcpretty` command
      summary: Additional options to be added to the executed `xcpretty` command.
      description: |-
        Additional options to be added to the executed `xcpretty` command.

  #
  # Automatic Code Signing
  - automatic_code_signing: "off"
    opts:
      category: Automatic code signing
      title: Automatic code signing method
      summary: This input determines which Bitrise Apple service connection should be used for automatic code signing.
      description: |-
        This input determines which Bitrise Apple service connection should be used for automatic code signing.

        Available values:
        - `off`: Do not do any auto codesigning
        - `enterprise-with-apple-id`: [Bitrise Apple Service connection with an Apple Developer Enterpsie account.](https://devcenter.bitrise.io/getting-started/connecting-to-services/connecting-to-an-apple-service-with-apple-id/)
        - `api-key`: [Bitrise Apple Service connection with API Key.](https://devcenter.bitrise.io/getting-started/connecting-to-services/setting-up-connection-to-an-apple-service-with-api-key/)
        - `apple-id`: [Bitrise Apple Service connection with Apple ID.](https://devcenter.bitrise.io/getting-started/connecting-to-services/setting-up-connection-to-an-apple-service-with-api-key/)
      value_options:
        - "off"
        - "enterprise-with-apple-id"
        - "api-key"
        - "apple-id"
      is_required: true

  - register_test_devices: "no"
    opts:
      category: Automatic code signing
      title: Register test devices on the Apple Developer Portal
      summary: If set the step will register known test devices on Bitrise from team members with the Apple Developer Portal.
      description: |-
        If set the step will register known test devices on Bitrise from team members with the Apple Developer Portal.

        Note that setting this to "yes" may cause devices to be registered against your limited quantity of test devices in the Apple Developer Portal, which can only be removed once annually during your renewal window.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - min_profile_validity: 0
    opts:
      category: Automatic code signing
      title: The minimum days the Provisioning Profile should be valid
      summary: If set to >0 the managed Provisioning Profile will be renewed if it expires within the configured number of days.
      description: |-
        If set to >0 the managed Provisioning Profile will be renewed if it expires within the configured number of days.

        Otherwise the Step renews the managed Provisioning Profile if it is expired.

  - certificate_urls: $BITRISE_CERTIFICATE_URL
    opts:
      category: Automatic code signing
      title: Code signing certificate URL
      summary: URL of the code signing certificate to download.
      description: |-
        URL of the code signing certificate to download.

        Multiple URLs can be specified, separated by a pipe (`|`) character.

        Local file path can be specified, using the `file://` URL scheme.

  - passphrases: $BITRISE_CERTIFICATE_PASSPHRASE
    opts:
      category: Automatic code signing
      title: Code signing certificate passphrase
      summary: Passphrases for the provided code signing certificates.
      description: |-
        Passphrases for the provided code signing certificates.

        Specify as many passphrases as many Code signing certificate URL provided, separated by a pipe (`|`) character.

  - keychain_path: $BITRISE_KEYCHAIN_PATH
    opts:
      category: Automatic code signing
      title: Keychain path
      summary: Path to the Keychain where the code signing certificates will be installed.
      description: |-
        Path to the Keychain where the code signing certificates will be installed.

  - keychain_password: $BITRISE_KEYCHAIN_PASSWORD
    opts:
      category: Automatic code signing
      title: Keychain password
      summary: Password for the provided Keychain.
      description: |-
        Password for the provided Keychain.

  - build_url: $BITRISE_BUILD_URL
    opts:
      category: Automatic code signing
      title: Bitrise build URL
      summary: URL of the current Bitrise build.
      description: |-
        URL of the current Bitrise build.

  - build_api_token: $BITRISE_BUILD_API_TOKEN
    opts:
      category: Automatic code signing
      title: Bitrise build API token
      summary: API token to access Bitrise resources during the current build.
      description: |-
        API token to access Bitrise resources during the current build.

  #
  # Caching
  - cache_level: swift_packages
    opts:
      category: Caching
      title: Enable collecting cache content
      summary: Defines what cache content should be automatically collected.
      description: |-
        Defines what cache content should be automatically collected.

        Available options:
        - `none`: Disable collecting cache content.
        - `swift_packages`: Collect Swift PM packages added to the Xcode project.
      value_options:
        - "none"
        - "swift_packages"
      is_required: true

  #
  # Debugging
  - verbose_log: "no"
    opts:
      category: Debugging
      title: Enable verbose logging
      summary: If set the Step will print additional logs for debugging.
      description: |-
        If set the Step will print additional logs for debugging.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - collect_simulator_diagnostics: "never"
    opts:
      category: Debugging
      title: Collect Simulator diagnostics
      summary: If set simulator verbose logging will be enabled and the simulator diagnostics log will be exported.
      description: |-
        If set simulator verbose logging will be enabled and the simulator diagnostics log will be exported.
      value_options:
      - "always"
      - "on_failure"
      - "never"

  - headless_mode: "yes"
    opts:
      category: Debugging
      title: Run the simulator in headless mode
      summary: In headless mode the simulator is not launched in the foreground.
      description: |-
        In headless mode the simulator is not launched in the foreground.

        If set the simulator will not be visible but tests (even the screenshots) will run just like if you run a simulator in foreground.
      value_options:
        - "yes"
        - "no"

outputs:
- BITRISE_XCODE_TEST_RESULT:
  opts:
    title: Result of the tests. 'succeeded' or 'failed'.
    value_options:
    - succeeded
    - failed
- BITRISE_XCRESULT_PATH:
  opts:
    title: The path of the generated `.xcresult`
    description: |-
      The path of the generated `.xcresult`.
- BITRISE_XCRESULT_ZIP_PATH:
  opts:
    title: The path of the zipped `.xcresult`
    description: |-
      The path of the zipped `.xcresult`.
- BITRISE_XCODE_TEST_ATTACHMENTS_PATH:
  opts:
    title: The full, test attachments zip path
    description: |-
      This is the path of the test attachments zip.
- BITRISE_XCODEBUILD_BUILD_LOG_PATH:
  opts:
    title: xcodebuild build command log file path
    description: |-
      If `single_build` is set to false, the step runs `xcodebuild build` before the test,  
      and exports the raw xcodebuild log.
- BITRISE_XCODEBUILD_TEST_LOG_PATH:
  opts:
    title: xcodebuild test command log file path
    description: |-
      The step exports the `xcodebuild test` command output log.