

title: iOS Auto Provision with Apple ID
summary: Automatically manages your iOS Provisioning Profiles for your Xcode project.
description: |-

  The [Step](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#ios-auto-provision-with-apple-id-step) uses session-based authentication to connect to an Apple Developer account. In addition to an Apple ID and password, it also stores the 2-factor authentication (2FA) code you provide.

  Please note that the [iOS Auto Provision with App Store Connect API](https://app.bitrise.io/integrations/steps/ios-auto-provision-appstoreconnect) Step uses the official [App Store Connect API](https://developer.apple.com/documentation/appstoreconnectapi/generating_tokens_for_api_requests) instead of the old session-based method.

  The **iOS Auto Provision with Apple ID** Step supports in Xcode managed and manual code signing in the following ways:

  In the case of Xcode managed code signing projects, the Step:
  - Downloads the Xcode managed Provisioning Profiles and installs them for the build.
  - Installs the provided code signing certificates into the Keychain.
  In the case of manual code signing projects, the Step:
  - Ensures that the Application Identifier exists on the Apple Developer Portal.
  - Ensures that the project's Capabilities are set correctly in the Application Identifier.
  - Ensures that the Provisioning Profiles exist on the Apple Developer Portal and are installed for the build.
  - Ensures that all the available Test Devices exist on the Apple Developer Portal and are included in the Provisioning Profiles.
  - Installs the provided code signing certificates into the Keychain.

  ### Configuring the Step

  Before you start configuring the Step, make sure you've completed the following requirements:
  - You've [defining your Apple Developer Account to Bitrise](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#defining-your-apple-developer-account-to-bitrise-1).
  - You've [assigned an Apple Developer Account for your app](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/#assigning-an-apple-developer-account-for-your-app-1).

  To configure the Step:
  Once you've completed the above requirements, there is very little configuration needed to this Step.
  1. Add the **iOS Auto Provision with Apple ID** Step after any dependency installer Step in your Workflow, such as **Run CocoaPods install** or **Carthage**.
  2. Click the Step to edit its input fields. You can see that the **Distribution type**, **Xcode Project (or Workspace) path**, and the **Scheme name** inputs are automatically filled out for you.
  3. If your Developer Portal Account belongs to multiple development teams, add the **Developer Portal team ID** to manage the project's code signing files, for example '1MZX23ABCD4'. If that's not the case, you can still add it to manage the Provisioning Profiles with a different team than the one set in your project. If you leave it empty, the team defined by the project will be used.
  4. If you wish to overwrite the configuration defined in your Scheme (for example, Debug, Release), you can do so in the **Configuration name** input.
  5. If Xcode managed signing is enabled in the iOS app, check the value of the **Should the step try to generate Provisioning Profiles even if Xcode managed signing is enabled in the Xcode project?** input.
  - If it’s set to 'no', the Step will look for an Xcode Managed Provisioning Profile on the Apple Developer Portal.
  - If it’s set to 'yes', the Step will generate a new manual provisioning profile on the Apple Developer portal for the project.
  This input has no effect in the case of Manual code signing projects.
  6. **The minimum days the Provisioning Profile should be valid** lets you specify how long a Provisioning Profile should be valid to sign an iOS app. By default it will only renew the Provisioning Profile when it expires.

  ### Troubleshooting
  Please note that the 2FA code is only valid for 30 days. 
  When the 2FA code expires, you will need to re-authenticate to provide a new code. 
  Go to the Apple Developer Account of the **Account settings** page, it will automatically ask for the 2FA code to authenticate again. 
  There will be a list of the Apple Developer accounts that you have defined. To the far right of each, there are 3 dots. 
  Click the dots and select **Re-authenticate (2SA/2FA)**.

  ### Useful links
  - [Managing code signing files - automatic provisioning](https://devcenter.bitrise.io/code-signing/ios-code-signing/ios-auto-provisioning/#configuring-ios-auto-provisioning)
  - [iOS code signing troubleshooting](https://devcenter.bitrise.io/code-signing/ios-code-signing/ios-code-signing-troubleshooting/)

  ### Related Steps
  - [iOS Auto Provision with App Store Connect API](https://app.bitrise.io/integrations/steps/ios-auto-provision-appstoreconnect)
  - [Xcode Archive & Export](https://www.bitrise.io/integrations/steps/xcode-archive)

website: https://github.com/bitrise-steplib/steps-ios-auto-provision
source_code_url: https://github.com/bitrise-steplib/steps-ios-auto-provision
support_url: https://github.com/bitrise-steplib/steps-ios-auto-provision/issues

project_type_tags:
  - ios
  - cordova
  - ionic
  - react-native
  - flutter

type_tags:
  - code-sign

is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: ".IsCI"

inputs:
  #
  # xcodebuild configuration
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: Project path
      summary: Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.
      description: |-
        Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.
      is_required: true

  - scheme: $BITRISE_SCHEME
    opts:
      title: Scheme
      summary: Xcode Scheme name.
      description: |-
        Xcode Scheme name.
      is_required: true

  - configuration:
    opts:
      title: Build Configuration
      summary: Xcode Build Configuration.
      description: |-
        Xcode Build Configuration.

        If not specified, the default Build Configuration will be used.

  #
  # IPA export Inputs
  - distribution_method: "development"
    opts:
      title: Distribution method
      summary: Describes how Xcode should export the archive.
      description: |-
        Describes how Xcode should export the archive.
      value_options:
        - "development"
        - "app-store"
        - "ad-hoc"
        - "enterprise"
      is_required: true

  #
  # Automatic Code Signing
  - export_development_team:
    opts:
      title: Developer Portal team
      summary: The Developer Portal team to use for code signing.
      description: |-
        The Developer Portal team to use for code signing.

        If you leave it empty the team defined by the project will be used.

  - generate_profiles: "no"
    opts:
      category: Automatic code signing
      title: Force manual codesigning
      summary: Treat the project as if Xcode managed code signing is disabled.
      description: |-
        In the case of an Xcode project with __Xcode managed code signing__ enabled, by default the step downloads and installs the Xcode managed Provisioning Profiles.      

        If this input is set to: `yes`, the step will try to manage the Provisioning Profiles by itself (__like in the case of Manual code signing projects__), the step will fall back to use the Xcode managed Provisioning Profiles if there is an issue.      

        __This input has no effect in the case of Manual codesigning projects.__
      value_options:
      - "yes"
      - "no"

  - register_test_devices: "no"
    opts:
      category: Automatic code signing
      title: Register test devices on the Apple Developer Portal
      summary: If set the step will register known test devices on Bitrise from team members with the Apple Developer Portal.
      description: |-
        If set the step will register known test devices on Bitrise from team members with the Apple Developer Portal.

        Note that setting this to "yes" may cause devices to be registered against your limited quantity of test devices in the Apple Developer Portal, which can only be removed once annually during your renewal window.
      value_options:
        - "yes"
        - "no"
      is_required: true

  - min_profile_validity: 0
    opts:
      category: Automatic code signing
      title: The minimum days the Provisioning Profile should be valid
      summary: If set to >0 the managed Provisioning Profile will be renewed if it expires within the configured number of days.
      description: |-
        If set to >0 the managed Provisioning Profile will be renewed if it expires within the configured number of days.

        Otherwise the Step renews the managed Provisioning Profile if it is expired.

  - certificate_urls: $BITRISE_CERTIFICATE_URL
    opts:
      category: Automatic code signing
      title: Code signing certificate URL
      summary: URL of the code signing certificate to download.
      description: |-
        URL of the code signing certificate to download.

        Multiple URLs can be specified, separated by a pipe (`|`) character.

        Local file path can be specified, using the `file://` URL scheme.

  - passphrases: $BITRISE_CERTIFICATE_PASSPHRASE
    opts:
      category: Automatic code signing
      title: Code signing certificate passphrase
      summary: Passphrases for the provided code signing certificates.
      description: |-
        Passphrases for the provided code signing certificates.

        Specify as many passphrases as many Code signing certificate URL provided, separated by a pipe (`|`) character.

  - keychain_path: $BITRISE_KEYCHAIN_PATH
    opts:
      category: Automatic code signing
      title: Keychain path
      summary: Path to the Keychain where the code signing certificates will be installed.
      description: |-
        Path to the Keychain where the code signing certificates will be installed.

  - keychain_password: $BITRISE_KEYCHAIN_PASSWORD
    opts:
      category: Automatic code signing
      title: Keychain password
      summary: Password for the provided Keychain.
      description: |-
        Password for the provided Keychain.

  - build_url: $BITRISE_BUILD_URL
    opts:
      category: Automatic code signing
      title: Bitrise build URL
      summary: URL of the current Bitrise build.
      description: |-
        URL of the current Bitrise build.

  - build_api_token: $BITRISE_BUILD_API_TOKEN
    opts:
      category: Automatic code signing
      title: Bitrise build API token
      summary: API token to access Bitrise resources during the current build.
      description: |-
        API token to access Bitrise resources during the current build.

  #
  # Debugging
  - verbose_log: "no"
    opts:
      category: Debugging
      title: Enable verbose logging
      summary: If set the Step will print additional logs for debugging.
      description: |-
        If set the Step will print additional logs for debugging.
      value_options:
        - "yes"
        - "no"
      is_required: true

outputs:
  - BITRISE_EXPORT_METHOD:
    opts:
      title: "The selected distribution type"
      description: |-
        The selected distribution type.
        One of these: `development`, `app-store`, `ad-hoc` or `enterprise`.
  - BITRISE_DEVELOPER_TEAM:
    opts:
      title: "The development team's ID"
      description: |-
        The development team's ID.
        Example: `1MZX23ABCD4`
  - BITRISE_DEVELOPMENT_CODESIGN_IDENTITY:
    opts:
      title: "The development code signing identity's name"
      description: |-
        The development code signing identity's name.
        For example, `iPhone Developer: Bitrise Bot (VV2J4SV8V4)`.
  - BITRISE_PRODUCTION_CODESIGN_IDENTITY:
    opts:
      title: "The production code signing identity's name"
      description: |-
        The production code signing identity's name.
        Example: `iPhone Distribution: Bitrise Bot (VV2J4SV8V4)`
  - BITRISE_DEVELOPMENT_PROFILE:
    opts:
      title: "The main target's development provisioning profile's UUID"
      description: |-
        The main target's development provisioning profile's UUID.
        Example: `c5be4123-1234-4f9d-9843-0d9be985a068`
  - BITRISE_PRODUCTION_PROFILE:
    opts:
      title: "The main target's production provisioning profile UUID"
      description: |-
        The main target's production provisioning profile UUID.
        Example: `c5be4123-1234-4f9d-9843-0d9be985a068`

 